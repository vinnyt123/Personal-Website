{"version":3,"sources":["components/ImageCarousel/images sync nonrecursive /^/.*$","components/headerComponent/header.js","components/ImageCarousel/images.js","components/ImageCarousel/imageCarousel.js","components/contactComponent/contact.js","App.js","serviceWorker.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Header","dreamscapesImages","Array","from","val","index","nameSayerImages","LogoLinkedin_default","__webpack_require__","n","LogoLinkedin","IosDocument","IosDocument_default","contactComponent_contact","_useWindowDimensions","useWindowDimensions","windowHeight","windowWidth","react_default","a","createElement","className","style","marginTop","marginBottom","href","target","fontSize","color","LogoGithub_default","MdMail_default","src_App","name","text","images","tweetoTxt","react_router_dom","dreamscapesTxt","coverComponent_cover","nameSayerTxt","projects","App","checkValidServiceWorker","swUrl","config","hostname","window","location","navigator","serviceWorker","ready","then"],"mappings":"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","file":"static/js/main.aa35fe57.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 50;","import React from 'react';\r\n\r\nimport {\r\n    Link \r\n} from 'react-router-dom';\r\n\r\n//Includes\r\nimport './header.css';\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className='appHeader'>\r\n        <Link to=\"/\"> Vinny Tunnell </Link>\r\n        <Link to=\"/about\"> About </Link>\r\n        <Link to=\"/projects\"> Projects </Link>\r\n        <Link to=\"/resume\"> Resume </Link>\r\n        <Link to=\"/contact\"> Contact </Link>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","function imageLoader() {\r\n    var dreamscapesPath = './images/Dreamscapes/';\r\n    var nameSayerPath = './images/NameSayer/';\r\n    var tweetoPath = './images/Tweeto/';\r\n  \r\n    var dreamscapesImages = Array.from(new Array(7),(val,index)=> dreamscapesPath + (index + 1) + \".png\" );\r\n    var nameSayerImages = Array.from(new Array(8),(val,index)=> nameSayerPath + (index + 1) + \".jpg\" );\r\n    var tweetoImages = Array.from(new Array(4),(val,index)=> tweetoPath + (index + 1) + \".PNG\" );;\r\n  \r\n    var tweetoTxt = \"Tweeto is a social media application created using the CherryPy web framework for Python3 along with jinja2 for page \\\r\n     templating, and PyNacl for encryption of private messages. MySQL was used for data management. HTML, CSS, and \\\r\n     Javascript/JQuery were also used for creation of the UI and Ajax refreshing.\";\r\n  \r\n    var nameSayerTxt = \"Namesayer is a JavaFX application used to practice pronunciation of unfamiliar names. \\\r\n    The application loads in audio files of people saying the names, then cleans up the audio using ffmpeg commands called via the bash shell for linux. \\\r\n    Features include the ability to combine multiple names into a single name,\\\r\n    the creation of playlists and a theme store.\";\r\n  \r\n    var dreamscapesTxt = \"Dreamscapes is a platformer game made using JavaFX. CSS was used to style the menus. Open source images and sprite\\\r\n     sheets were used to create the maps and characters. Some open source sound effects were also utilized. High scores are serialized into\\\r\n      a .ser file and loaded on application start so they are persistent.\";\r\n  \r\n    const projects = [\r\n      {\r\n        name: \"Tweeto\",\r\n        text: tweetoTxt,\r\n        color: \"rgba(14,85,183,0.85)\",\r\n        images: tweetoImages\r\n      },\r\n      {\r\n        name: \"Dreamscapes\",\r\n        text: dreamscapesTxt,\r\n        color: \"#0d1122\",\r\n        images: dreamscapesImages\r\n      },\r\n      {\r\n        name: \"NameSayer\",\r\n        text: nameSayerTxt,\r\n        color: \"#157766\",\r\n        images: nameSayerImages\r\n      }\r\n    ]\r\n  \r\n    return projects;\r\n}\r\n\r\nexport default imageLoader;","import { Gallery, GalleryImage } from \"react-gesture-gallery\";\r\nimport useWindowDimensions from '../../index.js'\r\nimport React, { useState, useEffect, useRef } from 'react'\r\n\r\n//Includes\r\nimport './imageCarousel.css';\r\n\r\n\r\n\r\n//Image imports\r\nimport imageLoader from './images'\r\n\r\nfunction ImageCarousel(props) {\r\n\r\n  const projects = imageLoader();\r\n  console.log(\"meosn\");\r\n\r\n  var images = [];\r\n  for (var j = projects.length - 1; j >= 0; j--) {\r\n    images = projects[j].images.concat(images);\r\n  } \r\n\r\n  for (var i = 0; i < images.length - 1; i++) {\r\n    require.context('./images', false);\r\n  }\r\n\r\n  function getProjectFromI(i) {\r\n    var totalLen = 0;\r\n    for (var j = 0; j < projects.length; j++) {\r\n      totalLen += projects[j].images.length;\r\n      if (i <= totalLen - 1) {\r\n        return projects[j];\r\n      }\r\n    }\r\n  }\r\n\r\n  function changeImage(i) {\r\n    var project = getProjectFromI(i);\r\n    setIndex(i);\r\n    setColor(project.color);\r\n    setText(project.text);\r\n  }\r\n\r\n  \r\n  const [index, setIndex] = React.useState(0);\r\n  const [color, setColor] = React.useState(projects[0].color);\r\n  const [text, setText] = React.useState(projects[0].text);\r\n\r\n  const { windowHeight, windowWidth } = useWindowDimensions();\r\n  console.log(windowHeight);\r\n  console.log(windowWidth);\r\n\r\n  const [height, setHeight] = useState(0)\r\n  const ref = useRef(null)\r\n\r\n  useEffect(() => {\r\n    setHeight(ref.current.clientHeight)\r\n  })\r\n\r\n  console.log(height);\r\n\r\n  const remainingHeight = windowHeight - height - 50 - 61 - 10;\r\n\r\n  return (\r\n    \r\n    <div className='projectsWrapper'>\r\n      \r\n      <div className='projectsHeader'>\r\n        <a className=\"tweetoText\" style={{background: \"rgba(14,85,183,0.85)\", color: \"white\"}} onClick={() => changeImage(0)}>Tweeto</a>\r\n        <a style={{background: \"#0d1122\", color: \"white\"}} onClick={() => changeImage(4)}><img className=\"dreamscapesSnip\" src=\"/Images/dreamscapesSnip.PNG\" /></a>\r\n        <a style={{background: \"#157766\", color: \"white\", fontSize: '22px', fontWeight: 'normal'}} onClick={() => changeImage(11)}>NameSayer</a>\r\n      </div>\r\n\r\n      <div ref={ref} className='projectDescription' style={{background: color}}>\r\n        <div className='projectText'>{text}</div>\r\n      </div>\r\n      <Gallery className='projectsGallery'\r\n        onRequestChange={i => {   \r\n          changeImage(i);\r\n      }}\r\n        style={{\r\n          background: color,\r\n          width: \"100%\",\r\n          paddingBottom: 10,\r\n          height: remainingHeight\r\n        }}\r\n        index={index}\r\n      >\r\n        {images.map(image => (\r\n            <GalleryImage objectFit=\"contain\" key={image} src={image} />\r\n        ))\r\n        \r\n        }\r\n      </Gallery>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default ImageCarousel;\r\n","import React from 'react';\r\nimport useWindowDimensions from '../../index.js'\r\n\r\n\r\n//Includes\r\nimport './contact.css';\r\nimport MdMail from 'react-ionicons/lib/MdMail'\r\nimport LogoGithub from 'react-ionicons/lib/LogoGithub'\r\nimport LogoLinkedin from 'react-ionicons/lib/LogoLinkedin'\r\nimport IosDocument from 'react-ionicons/lib/IosDocument'\r\n\r\n\r\nfunction Contact() {\r\n    const { windowHeight, windowWidth } = useWindowDimensions();\r\n\r\n    if (windowWidth > 680) {\r\n        return (\r\n            <div className=\"contactWrapper\">\r\n                <p className=\"italicsBoi\">Reach out to get more info, talk business, or just chat.</p>\r\n\r\n                <div style={{marginTop: 15}}className=\"iconsWrapper\">\r\n                    <div className=\"textAndIcon\">\r\n                        <p>Download my CV</p>\r\n                    </div>\r\n                    <div className=\"textAndIcon\">\r\n                        <p>View my projects</p>\r\n                    </div>\r\n                    <div className=\"textAndIcon\">\r\n                        <p>Send me an email</p>\r\n                    </div>  \r\n                    <div className=\"textAndIcon\">\r\n                        <p>Connect on LinkedIn</p>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"iconsWrapper\" style={{marginBottom: 15}}>\r\n                    <a href=\"https://github.com/vinnyt123\" target=\"_blank\">\r\n                        <div className=\"textAndIcon\">\r\n                            <IosDocument fontSize=\"120px\" color=\"rgba(14,85,183,1)\" />\r\n                        </div>\r\n                    </a>\r\n                    <a href=\"https://github.com/vinnyt123\" target=\"_blank\">\r\n                        <div className=\"textAndIcon\">\r\n                            <LogoGithub fontSize=\"120px\" color=\"rgba(14,85,183,1)\"/>\r\n                        </div>\r\n                    </a>\r\n                    <a href=\"mailto:vinny.tunnell@gmail.com\">\r\n                        <div className=\"textAndIcon\">\r\n                            <MdMail fontSize=\"120px\" color=\"rgba(14,85,183,1)\"/>\r\n                        </div>\r\n                    </a>\r\n                    <a href=\"https://www.linkedin.com/in/vincent-tunnell-14aa34162/\" target=\"_blank\">\r\n                        <div className=\"textAndIcon\">\r\n                            <LogoLinkedin fontSize=\"120px\" color=\"rgba(14,85,183,1)\" />\r\n                        </div>   \r\n                    </a> \r\n                </div>\r\n            </div>\r\n            \r\n        );\r\n    } else {\r\n        return (\r\n            <div className=\"contactWrapper\">\r\n                <p className=\"italicsBoi\">Reach out to get more info, talk business, or just chat.</p>\r\n\r\n                <div style={{marginTop: 15}}className=\"iconsWrapper\">\r\n                    <div className=\"textAndIcon\">\r\n                        <p>Download my CV</p>\r\n                    </div>\r\n                    <div className=\"textAndIcon\">\r\n                        <p>View my projects</p>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"iconsWrapper\">\r\n                    <a href=\"https://github.com/vinnyt123\" target=\"_blank\">\r\n                        <div className=\"textAndIcon\">\r\n                            <IosDocument fontSize=\"120px\" color=\"rgba(14,85,183,1)\" />\r\n                        </div>\r\n                    </a>\r\n                    <a href=\"https://github.com/vinnyt123\" target=\"_blank\">\r\n                        <div className=\"textAndIcon\">\r\n                            <LogoGithub fontSize=\"120px\" color=\"rgba(14,85,183,1)\"/>\r\n                        </div>\r\n                    </a>\r\n                </div>\r\n\r\n                <div className=\"iconsWrapper\" style={{marginTop: 15}}>\r\n                    <div className=\"textAndIcon\">\r\n                            <p>Send me an email</p>\r\n                        </div>  \r\n                    <div className=\"textAndIcon\">\r\n                        <p>Connect on LinkedIn</p>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"iconsWrapper\" style={{marginBottom: 15}}>\r\n                    <a href=\"mailto:vinny.tunnell@gmail.com\">\r\n                        <div className=\"textAndIcon\">\r\n                            <MdMail fontSize=\"120px\" color=\"rgba(14,85,183,1)\"/>\r\n                        </div>\r\n                    </a>\r\n                    <a href=\"https://www.linkedin.com/in/vincent-tunnell-14aa34162/\" target=\"_blank\">\r\n                        <div className=\"textAndIcon\">\r\n                            <LogoLinkedin fontSize=\"120px\" color=\"rgba(14,85,183,1)\" />\r\n                        </div>   \r\n                    </a>\r\n                </div>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Contact;\r\n","import React from 'react';\n\n//Includes\nimport './assets/app.css';\nimport {BrowserRouter as Router,Link,Route} from 'react-router-dom';\n//import pic from './assets/Images/Dreamscapes/1.png';\n//HeaderImages\n//import dreamscapesHeader from \"./assets/Images/Dreamscapes\";\n//import '..\\\\public\\\\Images\\\\Tweeto\\\\1.PNG';\n\n\n//Components\nimport Header from './components/headerComponent/header';\nimport ImageCarousel from './components/ImageCarousel/imageCarousel';\nimport Cover from './components/coverComponent/cover';\nimport Divider from './components/dividerComponent/divider';\nimport About from './components/aboutComponent/about';\nimport Contact from './components/contactComponent/contact';\n\nfunction App() {\n\n  var projectsData = setupData();\n  console.log(projectsData);\n  var isPopoverOpen = true;\n  return (\n    \n    <Router>\n\n      <div className=\"App\">\n        <Cover/>\n        <div className=\"divider\">Profile</div>\n        <About/>\n        <div className=\"divider\">Projects</div>\n        <ImageCarousel projects={projectsData} isAuthed={true} />\n        <div className=\"divider\">Contact</div>\n        <Contact/>\n        {/* <Route exact path='/projects' render={(projects) => <ImageCarousel projects={projectsData} isAuthed={true} />}/> */}\n        \n\n      </div>\n\n    </Router>    \n  );\n}\n\nfunction setupData() {\n  var dreamscapesPath = './Images/Dreamscapes/';\n  var nameSayerPath = './Images/NameSayer/';\n  var tweetoPath = './Images/Tweeto/';\n\n  var dreamscapesImages = Array.from(new Array(7),(val,index)=> dreamscapesPath + (index + 1) + \".png\" );\n  var nameSayerImages = Array.from(new Array(8),(val,index)=> nameSayerPath + (index + 1) + \".jpg\" );\n  var tweetoImages = Array.from(new Array(4),(val,index)=> tweetoPath + (index + 1) + \".PNG\" );;\n\n  var tweetoTxt = \"Tweeto is a social media application created using the CherryPy web framework for Python3 along with jinja2 for page \\\n   templating, and PyNacl for encryption of private messages. MySQL was used for data management. HTML, CSS, and \\\n   Javascript/JQuery were also used for creation of the UI and Ajax refreshing.\";\n\n  var nameSayerTxt = \"Namesayer is a JavaFX application used to practice pronunciation of unfamiliar names. \\\n  The application loads in audio files of people saying the names, then cleans up the audio using ffmpeg commands called via the bash shell for linux. \\\n  Features include the ability to combine multiple names into a single name,\\\n  the creation of playlists and a theme store.\";\n\n  var dreamscapesTxt = \"Dreamscapes is a platformer game made using JavaFX. CSS was used to style the menus. Open source images and sprite\\\n   sheets were used to create the maps and characters. Some open source sound effects were also utilized. High scores are serialized into\\\n    a .ser file and loaded on application start so they are persistent.\";\n\n  const projects = [\n    {\n      name: \"Tweeto\",\n      text: tweetoTxt,\n      color: \"rgba(14,85,183,0.85)\",\n      images: tweetoImages\n    },\n    {\n      name: \"Dreamscapes\",\n      text: dreamscapesTxt,\n      color: \"#0d1122\",\n      images: dreamscapesImages\n    },\n    {\n      name: \"NameSayer\",\n      text: nameSayerTxt,\n      color: \"#157766\",\n      images: nameSayerImages\n    }\n  ]\n\n  return projects;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}